{
  "openapi": "3.0.1",
  "info": {
    "title": "Be-slim-mom-api",
    "description": "API documentation for GoIT project 'Be-slim-mom'. [Backend github repository](https://github.com/GrinchenkoD/be-slim-mom)"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://slim-mom.herokuapp.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Products",
      "description": "Products endpoints"
    }
  ],
  "paths": {
    "/auth/registration": {
      "post": {
        "test": 123,
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "409": {
            "description": "Such login already exist"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "test": 123,
        "tags": ["Auth"],
        "summary": "User loginization",
        "parameters": [],
        "requestBody": {
          "description": "Loginization's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "403": {
            "description": "Login or password is wrong"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "test": 123,
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/products/{productName}": {
      "get": {
        "tags": ["Products"],
        "summary": "Find procuts by name",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "productName",
            "type": "string",
            "description": "Product's name",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductNameResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/products/private/daily": {
      "post": {
        "tags": ["Products"],
        "summary": "Get daily calories and forbidden categories",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's info object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyCaloriesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/products/public/daily": {
      "post": {
        "tags": ["Products"],
        "summary": "Get daily calories and forbidden categories",
        "requestBody": {
          "description": "User's info object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyCaloriesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          }
        }
      }
    },
    "/products/add": {
      "post": {
        "tags": ["Products"],
        "summary": "Add product to a specific day of user",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Product's info object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsAddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/products/delete": {
      "patch": {
        "tags": ["Products"],
        "summary": "Delete product to a specific day of user",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Product's info object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product was not found"
          }
        }
      }
    },
    "/products/day-info/{date}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get user's day info",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "date",
            "type": "string",
            "description": "Date",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsDayResponse"
                }
              }
            }
          },

          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Date was not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "password", "login"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Kolya"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "login": {
            "type": "string",
            "description": "User's login",
            "example": "kolya23"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Kolya"
          },
          "login": {
            "type": "string",
            "description": "User's login",
            "example": "kolya23"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["login", "password"],
        "properties": {
          "login": {
            "type": "string",
            "description": "User's login",
            "example": "kolya23"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "login": { "type": "string" }
        }
      },
      "ProductNameResponse": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "example": [
              "Яйцо куриное (желток сухой)",
              "Яйцо куриное (вареное всмятку)",
              "Яйцо куриное (вареное вкрутую)",
              "Яйцо куриное",
              "Яйцо куриное (пашот)",
              "Яйцо черепашье",
              "Яйцо куриное маринованное",
              "Яйцо гусиное",
              "Яйцо куриное (белок)",
              "Яйцо куриное (вареное в мешочек)",
              "Яйцо куриное (белок сухой)",
              "Яйцо утиное",
              "Яйцо перепелиное",
              "Яйцо страусиное",
              "Яйцо индюшиное",
              "Яйцо куриное (желток)",
              "Макароны запеченные с яйцом"
            ]
          }
        }
      },
      "DailyCaloriesRequest": {
        "type": "object",
        "required": [
          "height",
          "age",
          "currentWeight",
          "desiredWeight",
          "bloodType"
        ],
        "properties": {
          "height": {
            "type": "integer",
            "description": "User's height",
            "example": 190
          },
          "age": {
            "type": "integer",
            "description": "User's age",
            "example": 30
          },
          "currentWeight": {
            "type": "integer",
            "description": "User's currentWeight",
            "example": 120
          },
          "desiredWeight": {
            "type": "integer",
            "description": "User's desiredWeight",
            "example": 90
          },
          "bloodType": {
            "type": "integer",
            "description": "User's bloodType",
            "example": 2
          }
        }
      },
      "DailyCategoriesResponse": {
        "type": "object",
        "properties": {
          "dailyCalories": {
            "type": "integer",
            "description": "User's daily calories",
            "example": 1900
          },
          "forbidenCategories": {
            "type": "array",
            "example": [
              "зерновые",
              "мучные",
              "масла и жиры",
              "орехи",
              "овощи и зелень"
            ]
          }
        }
      },
      "ProductsAddRequest": {
        "type": "object",
        "required": ["title", "weight", "date"],
        "properties": {
          "title": {
            "type": "string",
            "example": "Яйцо куриное (желток сухой)"
          },
          "weight": {
            "type": "integer",
            "example": 120
          },
          "date": {
            "type": "string",
            "example": "17-10-2020"
          }
        }
      },
      "ProductsAddResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "FYoFpmuSG31OlHzHNvNYX"
          },
          "title": {
            "type": "string",
            "example": "Яйцо куриное (желток сухой)"
          },
          "weight": {
            "type": "integer",
            "example": 120
          },
          "date": {
            "type": "string",
            "example": "17-10-2020"
          }
        }
      },
      "ProductsDeleteRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "FYoFpmuSG31OlHzHNvNYX"
          },
          "date": {
            "type": "string",
            "example": "17-10-2020"
          }
        }
      },
      "ProductsDayResponse": {
        "type": "object",
        "properties": {
          "caloriesReceived": {
            "type": "integer",
            "example": 747
          },
          "date": {
            "type": "string",
            "example": "17-10-2020"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Яйцо куриное (желток сухой)"
                },
                "weight": {
                  "type": "integer",
                  "example": 120
                },
                "category": {
                  "type": "string",
                  "example": "яйца"
                },
                "calories": {
                  "type": "integer",
                  "example": 747
                },
                "id": {
                  "type": "string",
                  "example": "Fv_yrYddyB4LlefBHsLd3"
                }
              }
            }
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
